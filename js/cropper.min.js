/*! Cropper.js v2.0.0 | (c) 2015-present Chen Fengyuan | MIT */
(function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports) :
        "function" == typeof define && define.amd ? define(["exports"], e) : 
        e((t = "undefined" != typeof globalThis ? globalThis : t || self).Cropper = {})
})(this, function(t) {
    "use strict";

    const e = "undefined" != typeof window && void 0 !== window.document,
          i = e ? window : {},
          s = !!e && "ontouchstart" in i.document.documentElement,
          n = !!e && "PointerEvent" in i;

    // ... rest of the code ...

    var jt = '<cropper-canvas background><cropper-image rotatable scalable skewable translatable></cropper-image><cropper-shade hidden></cropper-shade><cropper-handle action="select" plain></cropper-handle><cropper-selection initial-coverage="0.5" movable resizable><cropper-grid role="grid" bordered covered></cropper-grid><cropper-crosshair centered></cropper-crosshair><cropper-handle action="move" theme-color="rgba(255, 255, 255, 0.35)"></cropper-handle><cropper-handle action="n-resize"></cropper-handle><cropper-handle action="e-resize"></cropper-handle><cropper-handle action="s-resize"></cropper-handle><cropper-handle action="w-resize"></cropper-handle><cropper-handle action="ne-resize"></cropper-handle><cropper-handle action="nw-resize"></cropper-handle><cropper-handle action="se-resize"></cropper-handle><cropper-handle action="sw-resize"></cropper-handle></cropper-selection></cropper-canvas>';

    const Vt = /^img|canvas$/,
          Ut = /<(\/?(?:script|style)[^>]*)>/gi,
          qt = { template: jt };

    Tt.$define(),
    Dt.$define(),
    Pt.$define(),
    Rt.$define(),
    Ot.$define(),
    Mt.$define(),
    It.$define(),
    Ht.$define();

    class Bt {
        constructor(t, e) {
            if (this.options = qt, U(t) && (t = document.querySelector(t)), !tt(t) || !Vt.test(t.localName)) throw new Error("The first argument is required and must be an <img> or <canvas> element.");
            this.element = t, e = Object.assign(Object.assign({}, qt), e), this.options = e;
            const { ownerDocument: i } = t;
            let { container: s } = e;
            if (s && (U(s) && (s = i.querySelector(s)), !tt(s))) throw new Error("The `container` option must be an element or a valid selector.");
            tt(s) || (s = t.parentElement ? t.parentElement : i.body), this.container = s;
            const n = t.localName;
            let a = "";
            "img" === n ? ({ src: a } = t) : "canvas" === n && window.HTMLCanvasElement && (a = t.toDataURL());
            const { template: o } = e;
            if (o && U(o)) {
                const e = document.createElement("template"),
                      i = document.createDocumentFragment();
                e.innerHTML = o.replace(Ut, "<$1>"), i.appendChild(e.content), Array.from(i.querySelectorAll(l)).forEach((e => {
                    e.setAttribute("src", a), e.setAttribute("alt", t.alt || "The image to crop")
                })), t.parentElement ? (t.style.display = "none", s.insertBefore(i, t.nextSibling)) : s.appendChild(i)
            }
        }

        getCropperCanvas() {
            return this.container.querySelector(o)
        }

        getCropperImage() {
            return this.container.querySelector(l)
        }

        getCropperSelection() {
            return this.container.querySelector(d)
        }

        getCropperSelections() {
            return this.container.querySelectorAll(d)
        }
    }

    Bt.version = "2.0.0",
    t.ACTION_MOVE = g,
    t.ACTION_NONE = v,
    t.ACTION_RESIZE_EAST = w,
    t.ACTION_RESIZE_NORTH = C,
    t.ACTION_RESIZE_NORTHEAST = S,
    t.ACTION_RESIZE_NORTHWEST = A,
    t.ACTION_RESIZE_SOUTH = y,
    t.ACTION_RESIZE_SOUTHEAST = T,
    t.ACTION_RESIZE_SOUTHWEST = k,
    t.ACTION_RESIZE_WEST = E,
    t.ACTION_ROTATE = b,
    t.ACTION_SCALE = m,
    t.ACTION_SELECT = p,
    t.ACTION_TRANSFORM = f,
    t.ATTRIBUTE_ACTION = x,
    t.CROPPER_CANVAS = o,
    t.CROPPER_CROSSHAIR = r,
    t.CROPPER_GIRD = h,
    t.CROPPER_HANDLE = c,
    t.CROPPER_IMAGE = l,
    t.CROPPER_SELECTION = d,
    t.CROPPER_SHADE = u,
    t.CROPPER_VIEWER = $,
    t.CropperCanvas = Tt,
    t.CropperCrosshair = Dt,
    t.CropperElement = At,
    t.CropperGrid = Pt,
    t.CropperHandle = Rt,
    t.CropperImage = Ot,
    t.CropperSelection = Mt,
    t.CropperShade = It,
    t.CropperViewer = Ht,
    t.DEFAULT_TEMPLATE = jt,
    t.EVENT_ACTION = Y,
    t.EVENT_ACTION_END = L,
    t.EVENT_ACTION_MOVE = X,
    t.EVENT_ACTION_START = H,
    t.EVENT_CHANGE = j,
    t.EVENT_ERROR = P,
    t.EVENT_KEYDOWN = D,
    t.EVENT_LOAD = _,
    t.EVENT_POINTER_DOWN = R,
    t.EVENT_POINTER_MOVE = z,
    t.EVENT_POINTER_UP = M,
    t.EVENT_RESIZE = "resize",
    t.EVENT_TOUCH_END = O,
    t.EVENT_TOUCH_MOVE = N,
    t.EVENT_TOUCH_START = I,
    t.EVENT_TRANSFORM = V,
    t.EVENT_WHEEL = W,
    t.HAS_POINTER_EVENT = n,
    t.IS_BROWSER = e,
    t.IS_TOUCH_DEVICE = s,
    t.NAMESPACE = a,
    t.WINDOW = i,
    t.default = Bt,
    t.emit = lt,
    t.getAdjustedSizes = bt,
    t.getOffset = $t,
    t.isElement = tt,
    t.isFunction = Q,
    t.isNaN = q,
    t.isNumber = B,
    t.isObject = F,
    t.isPlainObject = J,
    t.isPositiveNumber = K,
    t.isString = U,
    t.isUndefined = Z,
    t.multiplyMatrices = ft,
    t.nextTick = ut,
    t.off = ot,
    t.on = rt,
    t.once = ht,
    t.toAngleInRadian = gt,
    t.toCamelCase = nt,
    t.toKebabCase = it,
    Object.defineProperty(t, "__esModule", { value: !0 })
});